library("ggplot2")
library("dplyr")
library("tidyr")
library("esquisse")
library("patchwork")
library("hrbrthemes")
library("tsne")
library("purrr")
library("tibble")
library("magrittr")
opts_chunk$set(echo = FALSE, include = FALSE)
mi_setup = list(
CAI_data = "Mercado Laboral de Machine Learning & Data Science en Colombia (Responses).xlsx",
data_dir = "CAI_009_Datos",
separar = c(3, 4, 14),
img_dir_comporta = "img_comporta",
img_dir_caracter = "img_caracter",
datos_limpios_file = "datos_procesados.csv",
diccionario_file = "diccionario_procesado.csv"
)
source("tidy_black.r")
str_collaps <- function(letrero, n){
letrero %>%
tolower %>%
str_replace_all("[:punct:]", "") %>%
str_replace_all("\\s", "_") %>%
str_replace_all("[áéíóúñ+]", "") %>%
str_trunc(n, ellipsis = "...", side = "center")
}
mi_setup %$%
file.path("..", data_dir, CAI_data) %>%
read_excel() -> datos_bruto
tibble(
vars = names(datos_bruto),
varnames = vars %>% str_collaps(20),
tipo_preg = c("tiempo", rep("caracter", 14), rep("lenguajes", 14), rep("tecno_herram", 42), "otros", "otros", rep("caracter", 3), "tecno_herram"),
clase_preg = c("tiempo", rep("caracter", 14), rep("comportamientos", 56), "otros", "otros", rep("caracter", 3), "comportamientos")
) %>%
mutate(
id = row_number()
) -> diccio
# diccio %$% unique(varnames)
setNames(datos_bruto, diccio[["varnames"]]) %>%
mutate(
# cul_es_el...anos_cop = log(cul_es_el...anos_cop),
cul_es_el...anos_cop = cut(cul_es_el...anos_cop, c(0, 1e6, 2e6, 3e6, 5e6, 1e7, 1.5e7, 2e7, 3e7, 5e7, Inf)),
cul_de_la...apliquen = str_replace_all(cul_de_la...apliquen, "[()]", ""),
cmo_has_a...apliquen = str_replace_all(cmo_has_a...apliquen, "[()]", "")
) -> datos
mi_setup %$% extract(diccio[["varnames"]], separar[1]) -> columna_para_separar
mi_setup %$% extract(diccio[["tipo_preg"]], separar[1]) -> tipo_columna_para_separar
mi_setup %$% extract(diccio[["clase_preg"]], separar[1]) -> clase_columna_para_separar
datos[[columna_para_separar]] %>%
paste(collapse = ", ") %>% str_split(", ") %>% unlist %>% unique -> niveles
niveles %>% str_collaps(28) %>% unique -> id_niveles
Map(str_detect,list(datos[[columna_para_separar]]), niveles) %>%
setNames(id_niveles) %>%
map_df(factor, labels = c("No", "Sí")) -> columna_separada_1
columna_separada_1 %>%
map_df(as.character) %>%
lapply("==", "Sí") %>%
map_dbl(mean) %>%
subset(. > 0.03) %>%
names -> cuales_cols
columna_separada_1 %<>% extract(cuales_cols)
tibble(
vars = niveles,
varnames = id_niveles,
tipo_preg = tipo_columna_para_separar,
clase_preg = clase_columna_para_separar
) %>%
filter(varnames %in% cuales_cols) %>%
mutate(id = 100 + row_number()) %>%
bind_rows(diccio) %>%
unique %>% arrange(id) -> diccio
datos %<>% bind_cols(columna_separada_1)
mi_setup %$% extract(diccio[["varnames"]], separar[2]) -> columna_para_separar
mi_setup %$% extract(diccio[["tipo_preg"]], separar[2]) -> tipo_columna_para_separar
mi_setup %$% extract(diccio[["clase_preg"]], separar[1]) -> clase_columna_para_separar
datos[[columna_para_separar]] %>%
paste(collapse = ", ") %>% str_split(", ") %>% unlist %>% unique -> niveles
niveles %>% str_collaps(28) %>% unique -> id_niveles
Map(str_detect,list(datos[[columna_para_separar]]), niveles) %>%
setNames(id_niveles) %>%
map_df(factor, labels = c("No", "Sí")) -> columna_separada_2
columna_separada_2 %>%
map_df(as.character) %>%
lapply("==", "Sí") %>%
map_dbl(mean) %>%
subset(. > 0.03) %>%
names -> cuales_cols
columna_separada_2 %<>% extract(cuales_cols)
# datos %>% View
tibble(
vars = niveles,
varnames = id_niveles,
tipo_preg = tipo_columna_para_separar,
clase_preg = clase_columna_para_separar
) %>%
filter(varnames %in% cuales_cols) %>%
mutate(id = 200 + row_number()) %>%
bind_rows(diccio) %>%
unique %>% arrange(id) -> diccio
datos %<>% bind_cols(columna_separada_2)
# install.packages("devtools")
# devtools::install_github("thomasp85/patchwork")
# library("googlesheets")
library("stringr")
library("readxl")
library("scales")
library("knitr")
library("ggplot2")
library("dplyr")
library("tidyr")
library("esquisse")
library("patchwork")
library("hrbrthemes")
library("tsne")
library("purrr")
library("tibble")
library("magrittr")
opts_chunk$set(echo = FALSE, include = FALSE)
mi_setup = list(
CAI_data = "Mercado Laboral de Machine Learning & Data Science en Colombia (Responses).xlsx",
data_dir = "CAI_009_Datos",
separar = c(3, 4, 14),
img_dir_comporta = "img_comporta",
img_dir_caracter = "img_caracter",
datos_limpios_file = "datos_procesados.csv",
diccionario_file = "diccionario_procesado.csv"
)
source("tidy_black.r")
str_collaps <- function(letrero, n){
letrero %>%
tolower %>%
str_replace_all("[:punct:]", "") %>%
str_replace_all("\\s", "_") %>%
str_replace_all("[áéíóúñ+]", "") %>%
str_trunc(n, ellipsis = "...", side = "center")
}
mi_setup %$%
file.path("..", data_dir, CAI_data) %>%
read_excel() -> datos_bruto
tibble(
vars = names(datos_bruto),
varnames = vars %>% str_collaps(20),
tipo_preg = c("tiempo", rep("caracter", 14), rep("lenguajes", 14), rep("tecno_herram", 42), "otros", "otros", rep("caracter", 3), "tecno_herram"),
clase_preg = c("tiempo", rep("caracter", 14), rep("comportamientos", 56), "otros", "otros", rep("caracter", 3), "comportamientos")
) %>%
mutate(
id = row_number()
) -> diccio
# diccio %$% unique(varnames)
setNames(datos_bruto, diccio[["varnames"]]) %>%
mutate(
# cul_es_el...anos_cop = log(cul_es_el...anos_cop),
cul_es_el...anos_cop = cut(cul_es_el...anos_cop, c(0, 1e6, 2e6, 3e6, 5e6, 1e7, 1.5e7, 2e7, 3e7, 5e7, Inf)),
cul_de_la...apliquen = str_replace_all(cul_de_la...apliquen, "[()]", ""),
cmo_has_a...apliquen = str_replace_all(cmo_has_a...apliquen, "[()]", "")
) -> datos
mi_setup %$% extract(diccio[["varnames"]], separar[1]) -> columna_para_separar
mi_setup %$% extract(diccio[["tipo_preg"]], separar[1]) -> tipo_columna_para_separar
mi_setup %$% extract(diccio[["clase_preg"]], separar[1]) -> clase_columna_para_separar
datos[[columna_para_separar]] %>%
paste(collapse = ", ") %>% str_split(", ") %>% unlist %>% unique -> niveles
niveles %>% str_collaps(28) %>% unique -> id_niveles
Map(str_detect,list(datos[[columna_para_separar]]), niveles) %>%
setNames(id_niveles) %>%
map_df(factor, labels = c("No", "Sí")) -> columna_separada_1
columna_separada_1 %>%
map_df(as.character) %>%
lapply("==", "Sí") %>%
map_dbl(mean) %>%
subset(. > 0.03) %>%
names -> cuales_cols
columna_separada_1 %<>% extract(cuales_cols)
tibble(
vars = niveles,
varnames = id_niveles,
tipo_preg = tipo_columna_para_separar,
clase_preg = clase_columna_para_separar
) %>%
filter(varnames %in% cuales_cols) %>%
mutate(id = 100 + row_number()) %>%
bind_rows(diccio) %>%
unique %>% arrange(id) -> diccio
datos %<>% bind_cols(columna_separada_1)
mi_setup %$% extract(diccio[["varnames"]], separar[2]) -> columna_para_separar
mi_setup %$% extract(diccio[["tipo_preg"]], separar[2]) -> tipo_columna_para_separar
mi_setup %$% extract(diccio[["clase_preg"]], separar[1]) -> clase_columna_para_separar
datos[[columna_para_separar]] %>%
paste(collapse = ", ") %>% str_split(", ") %>% unlist %>% unique -> niveles
niveles %>% str_collaps(28) %>% unique -> id_niveles
Map(str_detect,list(datos[[columna_para_separar]]), niveles) %>%
setNames(id_niveles) %>%
map_df(factor, labels = c("No", "Sí")) -> columna_separada_2
columna_separada_2 %>%
map_df(as.character) %>%
lapply("==", "Sí") %>%
map_dbl(mean) %>%
subset(. > 0.03) %>%
names -> cuales_cols
columna_separada_2 %<>% extract(cuales_cols)
# datos %>% View
tibble(
vars = niveles,
varnames = id_niveles,
tipo_preg = tipo_columna_para_separar,
clase_preg = clase_columna_para_separar
) %>%
filter(varnames %in% cuales_cols) %>%
mutate(id = 200 + row_number()) %>%
bind_rows(diccio) %>%
unique %>% arrange(id) -> diccio
datos %<>% bind_cols(columna_separada_2)
mi_setup %$% extract(diccio[["varnames"]], separar[3]) -> columna_para_separar
mi_setup %$% extract(diccio[["tipo_preg"]], separar[3]) -> tipo_columna_para_separar
mi_setup %$% extract(diccio[["clase_preg"]], separar[1]) -> clase_columna_para_separar
datos[[columna_para_separar]] %>%
paste(collapse = ", ") %>% str_split(", ") %>% unlist %>% unique -> niveles
niveles %>% str_collaps(30) %>% unique -> id_niveles
Map(str_detect,list(datos[[columna_para_separar]]), niveles) %>%
setNames(id_niveles) %>%
map_df(factor, labels = c("No", "Sí")) -> columna_separada_3
columna_separada_3 %>%
map_df(as.character) %>%
lapply("==", "Sí") %>%
map_dbl(mean) %>%
subset(. > 0.03) %>%
names -> cuales_cols
columna_separada_3 %<>% extract(cuales_cols)
# datos %>% View
tibble(
vars = niveles,
varnames = id_niveles,
tipo_preg = tipo_columna_para_separar,
clase_preg = clase_columna_para_separar
) %>%
filter(varnames %in% cuales_cols) %>%
mutate(id = 300 + row_number()) %>%
bind_rows(diccio) %>%
unique %>% arrange(id) -> diccio
datos %<>% bind_cols(columna_separada_3)
"timestamp" -> id_var
"comportamientos" -> esta_seccion
diccio %$%
extract(varnames, clase_preg == esta_seccion) -> columnas
columnas %>%
map(
function(var_name){
extract(datos, c(id_var, var_name)) %>% mutate(allocation = 1) -> df_tmp
spread_(df_tmp, key = var_name, value = "allocation", fill = 0) %>%
mutate(timestamp = NULL, '<NA>' = NULL) -> df_spread
names(df_spread)%>% str_collaps(10) -> df_names
setNames(df_spread, paste(var_name, df_names, sep = "_"))
}) %>% bind_cols() -> datos_seccion
extract(datos, columnas) %>%
map(na.omit) %>%
map(unique) %>%
map(sort) %>%
map2(columnas, tibble) %>%
map(setNames, c("rotulo", "var_name")) %>%
bind_rows() %>%
mutate(datos_sel_names = names(datos_seccion)) -> diccio_seccion
datos_seccion %>% dist %>% tsne %>% as_tibble() -> seccion_tsne
# install.packages("devtools")
# devtools::install_github("thomasp85/patchwork")
# library("googlesheets")
library("stringr")
library("readxl")
library("scales")
library("knitr")
library("ggplot2")
library("dplyr")
library("tidyr")
library("esquisse")
library("patchwork")
library("hrbrthemes")
library("tsne")
library("purrr")
library("tibble")
library("magrittr")
opts_chunk$set(echo = FALSE, include = FALSE)
mi_setup = list(
CAI_data = "Mercado Laboral de Machine Learning & Data Science en Colombia (Responses).xlsx",
data_dir = "CAI_009_Datos",
separar = c(3, 4, 14),
img_dir_comporta = "img_comporta",
img_dir_caracter = "img_caracter",
datos_limpios_file = "datos_procesados.csv",
diccionario_file = "diccionario_procesado.csv"
)
source("tidy_black.r")
str_collaps <- function(letrero, n){
letrero %>%
tolower %>%
str_replace_all("[:punct:]", "") %>%
str_replace_all("\\s", "_") %>%
str_replace_all("[áéíóúñ+]", "") %>%
str_trunc(n, ellipsis = "...", side = "center")
}
mi_setup %$%
file.path("..", data_dir, CAI_data) %>%
read_excel() -> datos_bruto
tibble(
vars = names(datos_bruto),
varnames = vars %>% str_collaps(20),
tipo_preg = c("tiempo", rep("caracter", 14), rep("lenguajes", 14), rep("tecno_herram", 42), "otros", "otros", rep("caracter", 3), "tecno_herram"),
clase_preg = c("tiempo", rep("caracter", 14), rep("comportamientos", 56), "otros", "otros", rep("caracter", 3), "comportamientos")
) %>%
mutate(
id = row_number()
) -> diccio
# diccio %$% unique(varnames)
setNames(datos_bruto, diccio[["varnames"]]) %>%
mutate(
# cul_es_el...anos_cop = log(cul_es_el...anos_cop),
cul_es_el...anos_cop = cut(cul_es_el...anos_cop, c(0, 1e6, 2e6, 3e6, 5e6, 1e7, 1.5e7, 2e7, 3e7, 5e7, Inf)),
cul_de_la...apliquen = str_replace_all(cul_de_la...apliquen, "[()]", ""),
cmo_has_a...apliquen = str_replace_all(cmo_has_a...apliquen, "[()]", "")
) -> datos
mi_setup %$% extract(diccio[["varnames"]], separar[1]) -> columna_para_separar
mi_setup %$% extract(diccio[["tipo_preg"]], separar[1]) -> tipo_columna_para_separar
mi_setup %$% extract(diccio[["clase_preg"]], separar[1]) -> clase_columna_para_separar
datos[[columna_para_separar]] %>%
paste(collapse = ", ") %>% str_split(", ") %>% unlist %>% unique -> niveles
niveles %>% str_collaps(28) %>% unique -> id_niveles
Map(str_detect,list(datos[[columna_para_separar]]), niveles) %>%
setNames(id_niveles) %>%
map_df(factor, labels = c("No", "Sí")) -> columna_separada_1
columna_separada_1 %>%
map_df(as.character) %>%
lapply("==", "Sí") %>%
map_dbl(mean) %>%
subset(. > 0.03) %>%
names -> cuales_cols
columna_separada_1 %<>% extract(cuales_cols)
tibble(
vars = niveles,
varnames = id_niveles,
tipo_preg = tipo_columna_para_separar,
clase_preg = clase_columna_para_separar
) %>%
filter(varnames %in% cuales_cols) %>%
mutate(id = 100 + row_number()) %>%
bind_rows(diccio) %>%
unique %>% arrange(id) -> diccio
datos %<>% bind_cols(columna_separada_1)
mi_setup %$% extract(diccio[["varnames"]], separar[2]) -> columna_para_separar
mi_setup %$% extract(diccio[["tipo_preg"]], separar[2]) -> tipo_columna_para_separar
mi_setup %$% extract(diccio[["clase_preg"]], separar[1]) -> clase_columna_para_separar
datos[[columna_para_separar]] %>%
paste(collapse = ", ") %>% str_split(", ") %>% unlist %>% unique -> niveles
niveles %>% str_collaps(28) %>% unique -> id_niveles
Map(str_detect,list(datos[[columna_para_separar]]), niveles) %>%
setNames(id_niveles) %>%
map_df(factor, labels = c("No", "Sí")) -> columna_separada_2
columna_separada_2 %>%
map_df(as.character) %>%
lapply("==", "Sí") %>%
map_dbl(mean) %>%
subset(. > 0.03) %>%
names -> cuales_cols
columna_separada_2 %<>% extract(cuales_cols)
# datos %>% View
tibble(
vars = niveles,
varnames = id_niveles,
tipo_preg = tipo_columna_para_separar,
clase_preg = clase_columna_para_separar
) %>%
filter(varnames %in% cuales_cols) %>%
mutate(id = 200 + row_number()) %>%
bind_rows(diccio) %>%
unique %>% arrange(id) -> diccio
datos %<>% bind_cols(columna_separada_2)
mi_setup %$% extract(diccio[["varnames"]], separar[3]) -> columna_para_separar
mi_setup %$% extract(diccio[["tipo_preg"]], separar[3]) -> tipo_columna_para_separar
mi_setup %$% extract(diccio[["clase_preg"]], separar[1]) -> clase_columna_para_separar
datos[[columna_para_separar]] %>%
paste(collapse = ", ") %>% str_split(", ") %>% unlist %>% unique -> niveles
niveles %>% str_collaps(30) %>% unique -> id_niveles
Map(str_detect,list(datos[[columna_para_separar]]), niveles) %>%
setNames(id_niveles) %>%
map_df(factor, labels = c("No", "Sí")) -> columna_separada_3
columna_separada_3 %>%
map_df(as.character) %>%
lapply("==", "Sí") %>%
map_dbl(mean) %>%
subset(. > 0.03) %>%
names -> cuales_cols
columna_separada_3 %<>% extract(cuales_cols)
# datos %>% View
tibble(
vars = niveles,
varnames = id_niveles,
tipo_preg = tipo_columna_para_separar,
clase_preg = clase_columna_para_separar
) %>%
filter(varnames %in% cuales_cols) %>%
mutate(id = 300 + row_number()) %>%
bind_rows(diccio) %>%
unique %>% arrange(id) -> diccio
datos %<>% bind_cols(columna_separada_3)
"timestamp" -> id_var
"comportamientos" -> esta_seccion
diccio %$%
extract(varnames, clase_preg == esta_seccion) -> columnas
columnas %>%
map(
function(var_name){
extract(datos, c(id_var, var_name)) %>% mutate(allocation = 1) -> df_tmp
spread_(df_tmp, key = var_name, value = "allocation", fill = 0) %>%
mutate(timestamp = NULL, '<NA>' = NULL) -> df_spread
names(df_spread)%>% str_collaps(10) -> df_names
setNames(df_spread, paste(var_name, df_names, sep = "_"))
}) %>% bind_cols() -> datos_seccion
extract(datos, columnas) %>%
map(na.omit) %>%
map(unique) %>%
map(sort) %>%
map2(columnas, tibble) %>%
map(setNames, c("rotulo", "var_name")) %>%
bind_rows() %>%
mutate(datos_sel_names = names(datos_seccion)) -> diccio_seccion
datos_seccion %>% dist %>% tsne %>% as_tibble() -> seccion_tsne
diccio$vars
diccio %>% str
diccio %$% vars
diccio %>% filter(id %in% c(9, 75))
diccio %>% extract(varnames, id %in% c(9, 75))
diccio %$% extract(varnames, id %in% c(9, 75))
diccio %$% extract(varnames, id %in% c(9, 75)) -> variables
datos %>% group_by(variables)
datos %>% group_by_(variables)
datos %>% group_by_(variables) %>% count
variables
datos %>% group_by_(cul_es_el...anos_cop, cul_es_tu..._de_edad) %>% count
datos %>% group_by(cul_es_el...anos_cop, cul_es_tu..._de_edad) %>% count
datos %>%
extract(variables) %>%
group_by_all() %>% count
datos %>%
extract(variables) %>%
na.omit() %>%
group_by_all() %>% count
datos %>%
extract(variables) %>%
na.omit() %>%
group_by_all() %>%  # resume el valor medio por modalidad y programa
count() %>%
mutate(
p = prop.table(n)
prop = percent(p)
datos %>%
extract(variables) %>%
na.omit() %>%
group_by_all() %>%  # resume el valor medio por modalidad y programa
count() %>%
mutate(
p = prop.table(n),
prop = percent(p)
)
datos %>%
extract(variables) %>%
na.omit() %>%
group_by_all() %>%  # resume el valor medio por modalidad y programa
count() %>%
ungroup() %>%
mutate(
p = prop.table(n),
prop = percent(p)
)
variables
datos %>%
extract(variables) %>%
na.omit() %>%
group_by_all() %>%  # resume el valor medio por modalidad y programa
count() %>%
ungroup() %>%
mutate(
p = prop.table(n),
prop = percent(p)
) %>% # una nueva columna con el valor medio en millones
ggplot + # comienza una gráfica
aes(x = cul_es_el...anos_cop, y = cul_es_tu..._de_edad, fill = p, label = prop) + # componentes estéticos
geom_raster()
datos %>%
extract(variables) %>%
na.omit() %>%
group_by_all() %>%  # resume el valor medio por modalidad y programa
count() %>%
ungroup() %>%
mutate(
p = prop.table(n),
prop = percent(p)
) %>% # una nueva columna con el valor medio en millones
ggplot + # comienza una gráfica
aes(x = cul_es_el...anos_cop, y = cul_es_tu..._de_edad, fill = p, label = prop) + # componentes estéticos
geom_raster() + # rectángulos
geom_text() + # texto
scale_fill_continuous(
low = "gold3",
high = "white"
) + # cambiando el color
theme_light() +
theme(
legend.position = "none"
) -> highlight_table
highlight_table
highlight_table
highlight_table
